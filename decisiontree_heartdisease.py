# -*- coding: utf-8 -*-
"""DecisionTree_HeartDisease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OkFhaSrehFhvxh61e-jIhqmVN0UTsvyj
"""

# Commented out IPython magic to ensure Python compatibility.
#importing the library  
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import cufflinks as cf
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score,mean_squared_error

#reading the data
df=pd.read_csv('/content/DecisionTree_data_heart.csv')

df.head()

df.shape

#Here picking target weather patients is suffering from Heart diseases or not
df['target']

#0 = patients not suffering from heart disease
#1 = patients suffering from heart disease
df.groupby('target').size()

#describe of the data knowing mean,maximum,standard deviation
df.describe()

#information about the data weather they have null value or not
df.info()

### Lets do the visualization ###

df.hist(figsize=(14,14))
plt.show()

sns.barplot(x="fbs", y="target", data=df)
plt.show()

sns.barplot(df["cp"],df['target'])

sns.distplot(df["chol"])

#sns.pairplot(df[numeric_columns])

y=df['target']
sns.countplot(y)
a=df.target.value_counts()
print(a)

### Data processing ###

df['target'].isnull()

df['target'].unique()

#lets store in X and y
X,y= df,df.target

#lets remove target from the data
X.drop('target',axis=1,inplace=True)

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X = sc.fit_transform(X)

X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=10,test_size=0.3,shuffle=True)

X_test

y_test



#Lets import DecisionTree
from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()
dt.fit(X_train,y_train)

#lets predict our data on X-test and see the accuracy 
prediction=dt.predict(X_test)
accuracy_dt=accuracy_score(y_test,prediction)*100

print(accuracy_dt)  #here we can assume out predictions is 74% correct

prediction

X_DT=np.array([[63 ,1, 3,145,233,1,0,150,0,2.3,0,0,1]])  #random data selection for testing
X_DT_prediction=dt.predict(X_DT)

print(X_DT_prediction[0])

'''As the final result is 0 we can say the person is not suffering from Heart Diseases'''