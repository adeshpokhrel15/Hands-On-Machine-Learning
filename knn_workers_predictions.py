# -*- coding: utf-8 -*-
"""KNN_Workers_Predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tGnLMvtnc1dquEdWq1OGx4gnF6vI5Wjv
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing the library  
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sn

#Loading HR data
df1=pd.read_csv('/content/hr_data.csv')

df1.head()

#to checking the null value or not
df1.info()

#loading Employee satisfaction evalution data
df2=pd.read_excel('/content/employee_satisfaction_evaluation.xlsx')

df2.head()

df2.info()

#Merging and Joining data

#Here i have join df1 and df2 data 
main=df1.set_index('employee_id').join(df2.set_index('EMPLOYEE #'))

main.head()

main.describe()

#main[main.isnull().any(axis=1)]

main.isnull().sum()

main.fillna(main.mean(),inplace=True) # fill with mode for low variance

main.isnull().sum()

main['left'].value_counts()

#Data Visualization

sn.countplot(x=main['left'])

sn.barplot(x='promotion_last_5years',y='satisfaction_level',data=main,hue='left')

#Data preprocessing 

X=main.drop(['left'],axis=1)
y = main.left

X

y

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

#training the data
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=89)
num_features = list(main.columns)
for x in ['salary','department','left']:
    num_features.remove(x)
sc = StandardScaler()
X_train_std=sc.fit_transform(X_train[num_features])
X_test_std=sc.transform(X_test[num_features])

# main model for KNN
knn=KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train_std,y_train)
prediction_knn=knn.predict(X_test_std)
accuracy_knn=accuracy_score(y_test,prediction_knn)

#testing the data
scores_dict={}
print('Accuracy score : ',accuracy_knn)
scores_dict['KNeighborsClassifier'] = accuracy_score(y_test,prediction_knn)
print(classification_report(y_test,prediction_knn))

